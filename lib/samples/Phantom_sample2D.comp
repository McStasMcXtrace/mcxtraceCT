/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright, All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*         University of Copenhagen, Copenhagen, Denmark
*
* Component: Phantom_sample3D
*
* %I
*
* Written by: Matteo Busi, Jeppe R Frisvad, Erik B Knudsen
* Date: November 2017
* Version: 1.0
* Release: McXtrace 1.4
* Origin: DTU Physics
*
* Sample composed of multiple materials
*
* %D
* This component is to simulate samples described by mathematical phantoms.
* The object is defined "object_file", which is a 2D slice vertically homogeneous, in which each cell index label a different material. 
* Example of a 5x5 object_file:
*	1 0 1 1 0
*  2 1 0 0 1
*  2 3 3 3 3
*	1 2 1 0 1
* 	0 0 0 2 1 
* With 0 being empty, 1 mapping into "1.dat", 2 mapping into "2.dat", which are tables containing the parameters in the headers
* and the cross sections.
* If scattering is enabled the user can provide the Cumulative Distribution Functions (CDF) of the incoherent and coherent scattering functions I(Q) respectively as "... _inc.dat" and "... _coh.dat". 
* These contain the CDF(Cumulative density function) of scattering function (I(Q)) parametrized as Q=4*pi*sin(theta)/lambda.
*
"12.dat":
# Mg
# rho 1.740 Z 12
#	Energy(keV)	Coherent(cm^2 g^-1)	Incoherent(cm^2 g^-1)	Photoelectric(cm^2 g^-1)	PairProdNuc(cm^2 g^-1)	PairProdEle(cm^2 g^-1)	Total(cm^2 g^-1)
	1 1.9 0.005479 7407 0 0 7408.91
	1.5 1.803 0.01164 2664 0 0 2665.81
	.
	.
	.
	9000 1.177e-06 0.01648 4.1e-07 0.005852 0.0003026 0.0226362
	10000 9.532e-07 0.01527 3.644e-07 0.006348 0.0003492 0.0219685
*   
"12_coh.dat":
   # probability_density(p/1)  sin(theta)/lambda
   1.0683979e-02   1.2012012e-03
   1.6025100e-02   2.4024024e-03
   .
   .
   9.9987517e-01   1.1987988e+00
   1.0000000e+00   1.2000000e+00
   

"12_inc.dat":
# x(E,theta)=20.6074*(E/511)*sqrt(2*(1-cos(theta))) 				S(x)
   1.6132650e-03   3.4422835e-04
   3.2265301e-03   1.3741734e-03
   .
   .
   1.6129424e+01   5.9999929e+00
   1.6131037e+01   5.9999929e+00
*
* For more information you can contact M. Busi at mbusi@fysik.dtu.dk
*
* %P
* Input parameters:
* object_file : [".dat"] Sample phantom file. (Required)
* voxel_size : [m] Voxel size in meters of the phantom. (Default 1e-3)
* step_length : [m] Propagation length within the phantom of each step while tracing through. We suggest one third of the voxel_size. (Default 3e-4)
* yheight: [m] Vertical height of the slice-2D phantom. (Default 1e-1)
* phabs_switch: [0,1] Set to a value for enabling photo-absorption. (Default 1)
* compton_switch: [0,1] Set to a value for enabling  Compton scattering. (Default 0)
* rayleigh_switch: [0,1] Set to a value for enabling or disabling Rayleigh scattering. (Default 0)
* pairprod_switch: [0,1] Set to a value for enabling or disabling Pair Production (nuc+ele). (Default 0)
* scattering_order: [1,2,3,...] If scattering is enabled set the maximum number of scattering events. (Default 3)
*  
* Output parameters:
* compton_flag: [0,1] If 1 there was at least one compton scattering event
* rayleigh_flag: [0,1] If 1 there was at least one rayleigh scattering event
* single_flag: [0,1] If 1 there was a single scattering event
* multiple_flag: [0,1] If 1 there were multiple scattering events
* %E
*******************************************************************************/

DEFINE COMPONENT Phantom_sample2D
DEFINITION PARAMETERS (string object_file = 0)
SETTING PARAMETERS (voxel_size = 1e-3, step_length = 3e-4, yheight = 1e-1, phabs_switch=1, compton_switch=0, rayleigh_switch=0, pairprod_switch=0, scattering_order = 3)
OUTPUT PARAMETERS (compton_flag, rayleigh_flag, single_flag, multiple_flag)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

SHARE
%{
  %include "read_table-lib"
%}

DECLARE
%{
	t_Table Obj_table; // table where the object_file is stored
    struct{
		double rho, Z; // material properties
		int filled; // to check if material was encountered later
		t_Table att_table; // cross sections table
		t_Table coh_table, inc_table; // coherent scattering intensity, incoherent scattering intensity tables
	} prms[200]; // 200 is the maximum number of distinct materials (should be defined later when database is ready)
	int i, j; // voxel loop indices
	double box_size_x, box_size_z; // phantom box sizes (mm)
	double obj_size_x, obj_size_z; // phantom box sizes (1)
	int obj[1000][1000]; // 300: maximum phantom size
	int compton_flag, rayleigh_flag, single_flag, multiple_flag; // event type flags
%}

INITIALIZE
%{	
	/* SECTION CHECKLIST
	1. Check consistency of inputs - OK
	2. Load object file into the table then array - OK
	3. Open and load the material datafiles associated to each index into the prms (only once for each unique material) - OK
	*/

	int status=0;

	if((status=Table_Read(&Obj_table, object_file, 0))==-1){ // loads file into table
		fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",object_file,NAME_CURRENT_COMP);
		exit(-1);
    }
	/* Figuring size of phantom */
	obj_size_x = (double)Obj_table.rows;
	obj_size_z = (double)Obj_table.columns;
	box_size_x = voxel_size*obj_size_x;
	box_size_z = voxel_size*obj_size_z;
	printf("Phantom size: %gx%g\n",obj_size_x,obj_size_z);
	/* Load the phantom read as table into the 2D phantom array*/
	for(i=0;i<obj_size_x;i++){ 
		for(j=0;j<obj_size_z;j++){
			obj[i][j] = Table_Index(Obj_table,i,j);
			prms[obj[i][j]].filled=0;
		}
	}
	for(i=0;i<obj_size_x;i++){ // this loop open the unique material datafiles into prms.
		char mat_fn[512] = {0};
		for(j=0;j<obj_size_z;j++){
			if(obj[i][j]){ // Only when it's not zero (air)
				if(prms[obj[i][j]].filled==0){ // Only if that material wasn't loaded before
					prms[obj[i][j]].filled = 1;
					/* loading absorption and scattering cross section look-up tables */
					snprintf(mat_fn,512,"%d.dat",obj[i][j]);
					if((status=Table_Read(&(prms[obj[i][j]].att_table),mat_fn,0))==-1){ // load the crossection into prms[i].table 
						fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",mat_fn,NAME_CURRENT_COMP); exit(-1);
					}
					// load scattering CDF look-up tables
					if(rayleigh_switch){
						char coh_fn[512] = {0};
						snprintf(coh_fn,512,"%d_coh.dat",obj[i][j]);
						if((status=Table_Read(&(prms[obj[i][j]].coh_table),coh_fn,0))==-1){ // load the scattering CDF into prms[i].table 
							fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",coh_fn,NAME_CURRENT_COMP); exit(-1);
						}
					}
					if(compton_switch){ 
						char inc_fn[512] = {0};
						snprintf(inc_fn,512,"%d_inc.dat",obj[i][j]);
						if((status=Table_Read(&(prms[obj[i][j]].inc_table),inc_fn,0))==-1){ // load the scattering CDF into prms[i].table 
							fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",inc_fn,NAME_CURRENT_COMP); exit(-1);
						}
					}
					/* checking the header for retrieving density and Z*/
					char **header_parsed;					
					//rho
					header_parsed = Table_ParseHeader(prms[obj[i][j]].att_table.header,"rho",NULL);
					if(header_parsed[0]){prms[obj[i][j]].rho = strtod(header_parsed[0],NULL);}
					else{fprintf(stderr,"Warning(%s): %s not found in header of %s, set to 1\n",NAME_CURRENT_COMP,"rho",mat_fn); prms[obj[i][j]].rho = 1;}
					printf("Material density rho = %1.3f.\n",prms[obj[i][j]].rho);
					//Z
					header_parsed = Table_ParseHeader(prms[obj[i][j]].att_table.header,"Z",NULL);
					if(header_parsed[0]){prms[obj[i][j]].Z = strtod(header_parsed[0],NULL);}
					else{fprintf(stderr,"Warning(%s): %s not found in header of %s, set to 1\n",NAME_CURRENT_COMP,"Z",mat_fn); prms[obj[i][j]].Z = 1;}
					printf("Material Z = %1.3f.\n",prms[obj[i][j]].Z);
				}
			}
		}
	}
%}

TRACE
%{		
	int scatter_number = 0, hit_sample = 0;
	int mat=0;
	double d0, d1;
	double step_size;
	double mu, tot_mul, E, k;	
	
	compton_flag=0, rayleigh_flag=0, single_flag=0, multiple_flag=0; tot_mul = 0;
	hit_sample = box_intersect(&d0, &d1, x, y, z, kx, ky, kz, box_size_x, yheight, box_size_z);	// check intersection with the phantom

	if(hit_sample){ //checks if ray intersects the 2D array in the first place
		PROP_DL(d0); // X-ray propagates untill the first intersection with the box
		k = sqrt(kx*kx+ky*ky+kz*kz); E = k*K2E;// wave_vector amplitude // energy of the ray		 
		do{	// loops until it reaches the end of the box
			step_size = step_length; // set step size
			if(tot_mul==0){ // only at first step randomize step size to reduce regularity artifacts
				step_size*= rand01();
			}
			/* Now we find in which pixel we are */
			i = floor(fabs(obj_size_x+((x+step_size*1e-2)-(box_size_x/2))/voxel_size)); // the increment to x is due to boundary errors.
			j = floor(fabs(obj_size_z+((z+step_size*1e-2)-(box_size_z/2))/voxel_size));  // the obj_size- is due to the fact that the phantom otherwise would be inverted
			mu=0;
			if(obj[i][j]!=0){ // checks if voxel is filled with something.
				if(compton_switch || rayleigh_switch){ //scattering enabled
					double sintheta, costheta;
					double phi, sinphi, cosphi;
					double sign, a, b, sinsin, sincos;
					double kfx, kfy, kfz, kf;
					if(scatter_number<scattering_order){ // check first if we have reached maximum scatter order yet
						k=sqrt(kx*kx+ky*ky+kz*kz); E= K2E*k; // length of k
						double pinc = 1-exp(-prms[obj[i][j]].rho*1e2*step_size*Table_Value(prms[obj[i][j]].att_table,E,2));
						double pcoh = 1-exp(-prms[obj[i][j]].rho*1e2*step_size*Table_Value(prms[obj[i][j]].att_table,E,1));		
						double ksi = rand01();
						if(ksi<(pinc+pcoh)){ 
							if(scatter_number==0){// scatter order flag
								single_flag = 1;	
							} else{ 
								single_flag = 0;	
								multiple_flag = 1;
							}							
							if(ksi<pinc && compton_switch){// Compton Scattering
								scatter_number++; SCATTER; // increment scatter number
								compton_flag = 1; // inc scatter flag
								double kau = E/511;
								double a1 = log(1+2*kau);
								double a2 = (2*kau*(1+kau))/((1+2*kau)*(1+2*kau));
								double tau_m = 1/(1+2*kau);
								double t;
								int accepted=0;
								while(!accepted){
									double psi1=rand01();
									double psi2=rand01();
									if(rand01()<a1/(a1+a2)){
										t = pow(tau_m,psi1);
									}	else{
										t = sqrt(tau_m*tau_m + psi1*(1-tau_m*tau_m));
									}
									costheta = 1-(1-t)/(kau*t);
									double xx=20.6074*kau*sqrt(2*(1-costheta));
									double T=(1-((1-t)*((1+2*k)*t-1)/(t*(1+t*t)*k*k)))*(Table_Value(prms[obj[i][j]].inc_table,xx,1)/prms[obj[i][j]].Z);
									if(psi2<T){accepted=1;}
								}							
								sintheta = sqrt(1-costheta*costheta);
								phi = rand01()*2*PI; // azimuthal angle
								cosphi = cos(phi); sinphi = sin(phi);								
								// Spherical rotation
								kf = 1/k; kx*=kf; ky*=kf; kz*=kf; // now k has length 1
								sign = copysign(1,kz); a = -1/(1+fabs(kz)); b = kx*ky*a; sincos = sintheta*cosphi; sinsin = sintheta*sinphi;
								kfx = (1+kx*kx*a)*sincos + sign*b*sinsin + kx*costheta;
								kfy = b*sincos + sign*(1+ky*ky*a)*sinsin + ky*costheta;
								kfz = -sign*kx*sincos - ky*sinsin + kz*costheta;
								kf = sqrt(kfx*kfx+kfy*kfy+kfz*kfz); kf = k/kf;
								kfx*=kf; kfy*=kf; kfz*=kf; 
								// Compton shift
								kfx*=t;	kfy*=t;	kfz*=t;
								// apply new vector
								kx = kfx; ky = kfy; kz = kfz; 
							} 
							if(ksi>pinc && ksi<pinc+pcoh && rayleigh_switch){ // Rayleigh Scattering
								scatter_number++; SCATTER;// increment scatter number
								rayleigh_flag = 1; // coh scatter flag
								double arg = Table_Value(prms[obj[i][j]].coh_table,rand01(),1)/(2*k);
								int kk=0, kmax = 10;
								while(arg>1 && kk<kmax){
									kk++;
									arg = Table_Value(prms[obj[i][j]].coh_table,rand01(),1)/(2*k);
								} //reject bad values
								if(kk==kmax){arg = 1;  phi = 0;	rayleigh_flag=0;}
								sintheta = sin(asin(arg)); // sample sintheta from tables
								costheta = sqrt(1-sintheta*sintheta); 
								phi = rand01()*2*PI; // azimuthal angle
								cosphi = cos(phi); sinphi = sin(phi);
								// Spherical rotation
								kf = 1/k; kx*=kf; ky*=kf; kz*=kf; // now k has length 1
								sign = copysign(1,kz);	a = -1/(1+fabs(kz));	b = kx*ky*a; sincos = sintheta*cosphi; sinsin = sintheta*sinphi;
								kfx = (1+kx*kx*a)*sincos + sign*b*sinsin + kx*costheta;
								kfy = b*sincos + sign*(1+ky*ky*a)*sinsin + ky*costheta;
								kfz = -sign*kx*sincos - ky*sinsin + kz*costheta;
								kf = sqrt(kfx*kfx+kfy*kfy+kfz*kfz); kf = k/kf;
								kfx*=kf; kfy*=kf; kfz*=kf; 
								// apply new vector
								kx = kfx; ky = kfy; kz = kfz;
							}
						}
					}
				}
				if(phabs_switch){mu+=prms[obj[i][j]].rho*(Table_Value(prms[obj[i][j]].att_table,E,3));} // add photo-absorption cross section to attenuation
				if(compton_switch==0){mu+=prms[obj[i][j]].rho*(Table_Value(prms[obj[i][j]].att_table,E,2));} // add compton cross section to attenuation
				if(rayleigh_switch==0){mu+=prms[obj[i][j]].rho*(Table_Value(prms[obj[i][j]].att_table,E,1));} // add rayleigh cross section to attenuation
				if(pairprod_switch==0){mu+=prms[obj[i][j]].rho*(Table_Value(prms[obj[i][j]].att_table,E,4)+Table_Value(prms[obj[i][j]].att_table,E,5));} // add rayleigh cross section to attenuation
			}
			PROP_DL(step_size); // X-ray propagates of the step_size
			tot_mul = tot_mul + mu*step_size*1e2; // store the stepped absorption
	  }while((x<box_size_x/2 || x==box_size_x/2) && (x>-(box_size_x/2) || x==-(box_size_x/2)) && (z<box_size_z/2 || z==box_size_z/2) && (z>-(box_size_z/2) || z==-(box_size_z/2)) && (y<yheight/2 || y==yheight/2) && (y>-(yheight/2) || y==-(yheight/2)));
	  p*= exp(-tot_mul); // apply final weight to the X-ray
	}
%}

MCDISPLAY
%{
	magnify("xy");
	box(0,0,0,box_size_x,yheight,box_size_z);
%}

END