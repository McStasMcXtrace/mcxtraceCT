/*******************************************************************************
*
* McXtrace, X-ray tracing package
*         Copyright (C), All rights reserved
*         Risoe National Laboratory, Roskilde, Denmark
*         Institut Laue Langevin, Grenoble, France
*
* Component: PSD_monitor
*
* %I
* Written by: Erik Knudsen
* Date: June 22, 2009
* Version: $Revision$
* Origin: Risoe
* Release: McXtrace 0.1
*
* Position-sensitive monitor.
*
* %D
* Based on neutron component written by Kim Lefmann
* An (nx times ny) pixel PSD monitor. This component may also be used as a beam
* detector. If instead of xwidth, yheight a radius is given, the component has a circular footprint
* and integrates circularly (caking).
*
* Example: PSD_monitor(xmin=-0.1, xmax=0.1, ymin=-0.1, ymax=0.1,
            nx=90, ny=90, filename="Output.psd")
*
* 
* %P
* INPUT PARAMETERS:
*
* xmin:     Lower x bound of detector opening (m)
* xmax:     Upper x bound of detector opening (m)
* ymin:     Lower y bound of detector opening (m)
* ymax:     Upper y bound of detector opening (m)
* xwidth:   Width of detector. Overrides xmin,xmax. (m)
* yheight:  Height of detector. Overrides ymin,ymax. (m)
* radius:   Radius of circular detetor (m)
* nx:       Number of pixel columns (1)
* ny:       Number of pixel rows (1)
* nr:       Number of radial pixels (1)
* filename: Name of file in which to store the detector image (text)
* restore_xray: If set, the monitor does not influence the xray state (1)
*
* OUTPUT PARAMETERS:
*
* PSD_N:    Array of xray counts
* PSD_p:    Array of xray weight counts
* PSD_p2:   Array of second moments
*
* %E
*******************************************************************************/

DEFINE COMPONENT PSD_scintillator
DEFINITION PARAMETERS (nx=90, ny=90,nr=0, string filename=0, restore_xray=0, string det_response = "Si.txt")
  SETTING PARAMETERS (xmin=-0.05, xmax=0.05, ymin=-0.05, ymax=0.05, xwidth=0, yheight=0, radius=0, thickness = 300e-6)
OUTPUT PARAMETERS (PSD_N, PSD_p, PSD_p2)
/* X-ray parameters: (x,y,z,kx,ky,kz,phi,t,Ex,Ey,Ez,p) */ 

DECLARE
  %{
    double **PSD_N;
    double **PSD_p;
    double **PSD_p2;
	t_Table cross_table; // cross sections table
	double rho;
  %}
INITIALIZE
  %{
    int i,j;
    double *p1,*p2,*p3;
	int status=0;
	
    if (xwidth  > 0) { xmax = xwidth/2;  xmin = -xmax; }
    if (yheight > 0) { ymax = yheight/2; ymin = -ymax; }

    if ( ((xmin >= xmax) || (ymin >= ymax)) && !radius ) {
            printf("PSD_monitor: %s: Null detection area !\n"
                "ERROR        (xwidth,yheight,xmin,xmax,ymin,ymax,radius). Exiting",
           NAME_CURRENT_COMP);
      exit(0);
    }
    if(!radius){
      p1=calloc(nx*ny,sizeof(double));
      p2=calloc(nx*ny,sizeof(double));
      p3=calloc(nx*ny,sizeof(double));
      
      PSD_N=calloc(nx,sizeof(double *));
      PSD_p=calloc(nx,sizeof(double *));
      PSD_p2=calloc(nx,sizeof(double *));

      for (i=0; i<nx; i++){
        PSD_N[i]=&(p1[i*ny]);//calloc(ny,sizeof(double));
        PSD_p[i]=&(p2[i*ny]);//calloc(ny,sizeof(double));
        PSD_p2[i]=&(p3[i*ny]);//calloc(ny,sizeof(double));
      }
    }else{
      PSD_N=calloc(1,sizeof(double *));
      PSD_p=calloc(1,sizeof(double *));
      PSD_p2=calloc(1,sizeof(double *));
      *PSD_N=calloc(nr,sizeof(double));
      *PSD_p=calloc(nr,sizeof(double));
      *PSD_p2=calloc(nr,sizeof(double));
    }
	
	if((status=Table_Read(&cross_table, det_response, 0))==-1){ // loads file into table
		fprintf(stderr,"Error: Could not parse file \"%s\" in COMP %s\n",det_response,NAME_CURRENT_COMP);
		exit(-1);
	}
	//rho
	char **header_parsed = Table_ParseHeader(cross_table.header,"rho",NULL);
	if(header_parsed[0]){rho = strtod(header_parsed[0],NULL);}
	else{fprintf(stderr,"Warning(%s): %s not found in header of %s, set to 1\n",NAME_CURRENT_COMP,"rho",det_response); rho = 1;}
	printf("Scintillator bulk density (rho) = %1.3f.\n",rho);	

  %}
  
TRACE
  %{
    int i,j;

    PROP_Z0;
	  
	  //continue
	  if (!radius){
		if (x>xmin && x<xmax && y>ymin && y<ymax){
			 //account for detector's response
			double mu = Table_Value(cross_table,e,1);
			double l = thickness;
	    	p*=exp(-rho*mu*l);	
			
			i = floor((x - xmin)*nx/(xmax - xmin));
			j = floor((y - ymin)*ny/(ymax - ymin));
			PSD_N[i][j]++;
			PSD_p[i][j] += p;
			PSD_p2[i][j] += p*p;
			SCATTER;
	   }
     }
 	  else{
		  double r=sqrt(x*x+y*y);
		  if (r<radius){
			 //account for detector's response
			double mu = Table_Value(cross_table,e,5);
			double l = thickness;
	    	p*=exp(-rho*mu*l);	
			
			i = floor(r*nr/radius);
			PSD_N[0][i]++;
			PSD_p[0][i] += p;
			PSD_p2[0][i] += p*p;
			SCATTER;
		  }
	  }
      if (restore_xray) {
		RESTORE_XRAY(INDEX_CURRENT_COMP, x, y, z, kx, ky, kz, phi, t, Ex, Ey, Ez, p);
      }
  %}
  
SAVE
  %{
    if(!radius){
        if(nx==1 && ny==1){
            DETECTOR_OUT_0D("Intensity monitor " NAME_CURRENT_COMP, (double) PSD_N[0][0], PSD_p[0][0], PSD_p2[0][0]);
        }else if(nx==1){
            DETECTOR_OUT_1D(
                    "PSD_monitor","Y Position[m]", "Intensity", "Y",
                    ymin,ymax,ny,&PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],filename);
        }else if (ny==1){
            DETECTOR_OUT_1D(
                    "PSD_monitor","X Position[m]", "Intensity", "X",
                    xmin,xmax,nx,&PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],filename);
        }else{
            DETECTOR_OUT_2D(
                    "PSD monitor",
                    "X position [m]",
                    "Y position [m]",
                    xmin, xmax, ymin, ymax,
                    nx, ny,
                    *PSD_N,*PSD_p,*PSD_p2,
                    filename);
        }
    }else{
      DETECTOR_OUT_1D(
          "PSD_monitor","Radial Position[m]", "Intensity", "R",
          0,radius,nr,&PSD_N[0][0],&PSD_p[0][0],&PSD_p2[0][0],filename);
    }

  %}

FINALLY
%{
   free(PSD_N[0]);
   free(PSD_N);
   free(PSD_p[0]);
   free(PSD_p);
   free(PSD_p2[0]);
   free(PSD_p2);
%}
MCDISPLAY
%{
	magnify("xy");
	box(0,0,0,xwidth,yheight,thickness);
%}

END
